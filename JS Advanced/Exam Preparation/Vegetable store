class VegetableStore {
    constructor(owner, location) {
      this.owner = owner;
      this.location = location;
      this.availableProducts = [];
    }

    loadingVegetables(vegetables) {
      const namesArray = [];

      for (const vegetable of vegetables) {
        let [type, quantity, price] = vegetable.split(' ');
        quantity = Number(quantity);
        price = Number(price);

        const product = this.availableProducts.find(p => p.type == type);

        if (product == undefined) {
          this.availableProducts.push({type, quantity, price});
          namesArray.push(type);
        } else {
          if (product.price < price) {
            product.price = price;
          }
          product.quantity += quantity;
        }
      }
      return `Successfully added ${namesArray.join(', ')}`;
    }

    buyingVegetables(selectedProducts) {
      let totalPrice = 0;

      for (const selectedProduct of selectedProducts) {
        let [type, quantity] = selectedProduct.split(' ');
        quantity = Number(quantity);

        const product = this.availableProducts.find(p => p.type == type);

        if (product == undefined) {
          throw new Error(`${type} is not available in the store, your current bill is $${totalPrice.toFixed(2)}.`);
        }
        if (product.quantity < quantity) {
          throw new Error(`The quantity ${quantity} for the vegetable ${type} is not available in the store, your current bill is $${totalPrice.toFixed(2)}.`);
        }
        totalPrice += product.price * quantity;
        product.quantity -= quantity;
      }

      return `Great choice! You must pay the following amount $${totalPrice.toFixed(2)}.`;
    }
    rottingVegetable(type, quantity) {
      const product = this.availableProducts.find(p => p.type == type);

      if (product == undefined) {
        throw new Error(`${type} is not available in the store.`);
      }
      if (product.quantity < quantity) {
        product.quantity = 0;
        return `The entire quantity of the ${type} has been removed.`;
      }
      product.quantity -= quantity;
      return `Some quantity of the ${type} has been removed.`;
    }
    revision() {
      const sorted = this.availableProducts.sort((a, b) => a.price - b.price);
      let result = [`Available vegetables:\n`];
      sorted.forEach(a => {
        result += `${a.type}-${a.quantity}-$${a.price}\n`
      });
      result += `The owner of the store is ${this.owner}, and the location is ${this.location}.`;
      return result;
    }
}
let vegStore = new VegetableStore("Jerrie Munro", "1463 Pette Kyosheta, Sofia");
console.log(vegStore.loadingVegetables(["Okra 2.5 3.5", "Beans 10 2.8", "Celery 5.5 2.2", "Celery 0.5 2.5"]));
console.log(vegStore.rottingVegetable("Okra", 1));
console.log(vegStore.rottingVegetable("Okra", 2.5));
console.log(vegStore.buyingVegetables(["Beans 8", "Celery 1.5"]));
console.log(vegStore.revision());
