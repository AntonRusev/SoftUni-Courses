class Garden {
    constructor(spaceAvailable) {
        this.spaceAvailable = spaceAvailable;
        this.plants = [];
        this.storage = [];
    }

    addPlant(plantName, spaceRequired) {
        if (this.spaceAvailable < spaceRequired) {
            throw new Error('Not enough space in the garden.');
        }

        this.plants.push({
            plantName,
            spaceRequired,
            ripe: false,
            quantity: 0
        })

        this.spaceAvailable -= spaceRequired;

        return `The ${plantName} has been successfully planted in the garden.`;
    }
    ripenPlant(plantName, quantity) {
        if (quantity <= 0) {
            throw new Error('The quantity cannot be zero or negative.');
        }

        const foundPlant = this.plants.find(element => element.plantName === plantName);
        
        if (foundPlant == undefined) {
            throw new Error(`There is no ${plantName} in the garden.`);
        }
        if (foundPlant.ripe == true) {
            throw new Error(`The ${plantName} is already ripe.`);
        }

        foundPlant.ripe = true;
        foundPlant.quantity += quantity;

        if (quantity == 1) {
            return `${quantity} ${plantName} has successfully ripened.`;
        } else {
            return `${quantity} ${plantName}s have successfully ripened.`;
        }
    }
    harvestPlant(plantName){
        const foundPlant = this.plants.findIndex(element => element.plantName === plantName);
        
        if (foundPlant == -1) {
            throw new Error(`There is no ${plantName} in the garden.`);
        }
        if (this.plants[foundPlant].ripe == false) {
            throw new Error(`The ${plantName} cannot be harvested before it is ripe.`);
        }

        this.storage.push(`${this.plants[foundPlant].plantName} (${this.plants[foundPlant].quantity})`);
        this.spaceAvailable += this.plants[foundPlant].spaceRequired;
        this.plants.splice(foundPlant, 1);
        
        return `The ${plantName} has been successfully harvested.`;
    }
    generateReport(){
        let plantNames = [];
        this.plants.forEach((plant) => {
            plantNames.push(plant.plantName);
        });

        let plantsInStorage = `Plants in storage: The storage is empty.`;

        if (this.storage.length > 0) {
            plantsInStorage = `Plants in storage: `;
            plantsInStorage += this.storage.join(', ');
        }

        let result = [
            `The garden has ${this.spaceAvailable} free space left.`,
                `Plants in the garden: ${plantNames.join(', ')}`,
                `${plantsInStorage}`
        ].join('\n');
        return result;
    }
}
