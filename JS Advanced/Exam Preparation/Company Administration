const { companyAdministration } = require('./companyAdministration');
const { expect } = require('chai');
 

describe('Tests for companyAdministration', () => {
    describe('Tests for hiringEmployee', () => {
        it ('works properly', () => {
            expect(companyAdministration.hiringEmployee("a", 'Programmer', 3)).to.equal(`a was successfully hired for the position Programmer.`);
            expect(companyAdministration.hiringEmployee("a", 'Programmer', 2)).to.equal(`a is not approved for this position.`);
            expect(() => companyAdministration.hiringEmployee("a", 'b', 3)).to.throw(`We are not looking for workers for this position.`);
        });
    });
    describe('Tests for calculateSalary', () => {
        it ('works properly', () => {
            expect(companyAdministration.calculateSalary(10)).to.equal(150);
            expect(companyAdministration.calculateSalary(161)).to.equal(3415);
        });
        it ('does not work with invalid params', () => {
            expect(() => companyAdministration.calculateSalary('1')).to.throw('Invalid hours');
            expect(() => companyAdministration.calculateSalary(-1)).to.throw('Invalid hours');
            expect(() => companyAdministration.calculateSalary([1])).to.throw('Invalid hours');
        });
    });
    describe('Tests for firedEmployee', () => {
        it ('works properly', () => {
            expect(companyAdministration.firedEmployee (["Petar", "Ivan", "George"], 1)).to.equal(`Petar, George`);
        });
        it ('does not work with invalid input', () => {
            expect(() =>companyAdministration.firedEmployee ("Petar", "Ivan", "George", 1)).to.throw(`Invalid input`);
            expect(() =>companyAdministration.firedEmployee (["Petar", "Ivan", "George"], -1)).to.throw(`Invalid input`);
            expect(() =>companyAdministration.firedEmployee (["Petar", "Ivan", "George"], 4)).to.throw(`Invalid input`);
            expect(() =>companyAdministration.firedEmployee (["Petar", "Ivan", "George"], '1')).to.throw(`Invalid input`);

        });
    });
});

Template:

const companyAdministration = {

    hiringEmployee(name, position, yearsExperience) {
        if (position == "Programmer") {
            if (yearsExperience >= 3) {
                return `${name} was successfully hired for the position ${position}.`;
            } else {
                return `${name} is not approved for this position.`;
            }
        }
        throw new Error(`We are not looking for workers for this position.`);
    },
    calculateSalary(hours) {

        let payPerHour = 15;
        let totalAmount = payPerHour * hours;

        if (typeof hours !== "number" || hours < 0) {
            throw new Error("Invalid hours");
        } else if (hours > 160) {
            totalAmount += 1000;
        }
        return totalAmount;
    },
    firedEmployee(employees, index) {

        let result = [];

        if (!Array.isArray(employees) || !Number.isInteger(index) || index < 0 || index >= employees.length) {
            throw new Error("Invalid input");
        }
        for (let i = 0; i < employees.length; i++) {
            if (i !== index) {
                result.push(employees[i]);
            }
        }
        return result.join(", ");
    }

}

module.exports = { companyAdministration };
