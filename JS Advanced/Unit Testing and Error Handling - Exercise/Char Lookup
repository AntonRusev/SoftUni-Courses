const {lookupChar} = require('./charLookup');
const {expect} = require('chai');

describe('Tests for Char Lookup', () => {
    it('works with proper params', () => {
        expect(lookupChar('test', 3)).to.equal('t');
    }); 
    it('does not work with wrong params - missing string', () => {
        expect(lookupChar(1, 3)).to.be.undefined;
    }); 
    it('does not work with wrong params - missing integer', () => {
        expect(lookupChar('one', 'two')).to.be.undefined;
    }); 
    it('does not work with index outside the string length - higher', () => {
        expect(lookupChar('test', 6)).to.equal('Incorrect index');
    }); 
    it('does not work with index outside the string length - below zero', () => {
        expect(lookupChar('test', -1)).to.equal('Incorrect index');
    }); 
    it('does not parse string to number', () => {
        expect(lookupChar('test', '1')).to.be.undefined;
    }); 
    it('does not work with floating point number', () => {
        expect(lookupChar('test', 0.5)).to.be.undefined;
    }); 
    it('the first param is missing', () => {
        expect(lookupChar('', 0)).to.equal('Incorrect index');
    }); 
    it('the second param is missing', () => {
        expect(lookupChar('test')).to.be.undefined;
    }); 
    it('happy path', () => {
        expect(lookupChar('happy', 1)).to.equal('a');
    }); 
});

Template:

function lookupChar(string, index) {
    if (typeof(string) !== 'string' || !Number.isInteger(index)) {
        return undefined;
    }
    if (string.length <= index || index < 0) {
        return "Incorrect index";
    }

    return string.charAt(index);
}

module.exports = {lookupChar};
